#
# To configure the testbed, edit this file. Look for areas marked "FIX" and make the appropriate changes
# Areas labelled "DON'T TOUCH" should be ignored until/unless you want advanced features
#
%Lifecycle::Lite =
(
  Name    => 'Lifecycle Lite',

# DON'T TOUCH You can change the verbosity, but I don't recommend it.
  Quiet   => 0,
  Verbose => 1,
  Debug   => 0,

# FIX Change TmpDir to the name of a suitable directory. The testbed will use this as a
# working directory for internal state files only, not for file-transfers. /tmp would do,
# but a personal subdirectory of that would be tidier
  TmpDir        => '/tmp/wildish/',

# DON'T TOUCH
  Dummy         => 0,
  Jitter        => 0.0, # Spread delay-times for workflow events by this factor
  CycleSpeedup  =>   1, # speed up time. 1 => real-time, 24 => one day per hour
  Suspend       =>   0, # set to 1 to suspend new workflows from starting,
                        # but allow existing workflows to run to completion
  StopOnIdle    =>   1, # spit the dummy if I have no work to do

# FIX The Lifecycle agent throttles its degree of parallelism, set this to something appropriate
  NJobs         =>  20, # degree of parallelism

# DON'T TOUCH
# Also true globals, but these make sense to override. Providing values here
# is just a convenient way to avoid having to repeat them everywhere.
  CycleTime => 999_999_999, # 30 years!
  NCycles =>  -1, # < 0 => infinite, > 0 to limit

  KeepInputs  => 0, # keep the  input files of successful jobs?
  KeepOutputs => 0, # keep the output files of successful jobs?
  KeepLogs    => 0, # keep the    log files of successful jobs?
  KeepFailedInputs  => 1, # keep the  input files of failed jobs?
  KeepFailedOutputs => 1, # keep the output files of failed jobs?
  KeepFailedLogs    => 1, # keep the    log files of failed jobs?

  StatsFrequency => 3600 * 12,

  Templates =>
  {
    'IPv6MeshWorkflow' =>
    {
      CycleTime => 999_999_999, # 30 years!
      NCycles => -1,

# FIX Set the FTSService URL and the path to your IPv6 proxy
      FTSService => 'https://fts3-kit-02-hepix.gridka.de:8443/fts3/',
      Proxy      => '/tmp/wildish/proxy/voms.ipv6.cert',

# DON'T TOUCH
#     JobManager timeout
      Timeout => 14400,
      Events    => [ 'putFile', 'pollJob', 'checkFile', 'clearFile', 'restartCycle' ],
      Intervals => {
        'putFile'   => undef,
        'pollJob'   =>    10,
        'checkFile' =>     1,
        'clearFile' =>     1,
        'restartCycle'  =>   900,
      },
    },
# DON'T TOUCH
    'CheckProxy' =>
    {
      CycleTime     => 600,
      Incarnations  => 1,
      NCycles       => 1,
      Events        => [ 'CheckProxy' ],
      GracePeriod   => 600,
    },
  },

# Default values are applied if they are not defined per Template or Workflow
# This allows setting parameters for all Templates, rather than repeating them
  Defaults =>
  {
    Exec => {
      'CheckProxy'   => 'CheckProxy.pl',
      'putFile'      => 'ipv6PutFile.pl',
      'pollJob'      => 'ipv6PollJob.pl',
      'checkFile'    => 'ipv6CheckFile.pl',
      'clearFile'    => 'ipv6ClearFile.pl',
      'restartCycle' => 'ipv6RestartCycle.pl',
    },
  },

  Workflows =>
  [
# FIX There are two sections here, on the assumption that youh have two proxies. That's because I couldn't
# figure out how to make a long-lived IPv6 proxy, so I made a long-lived normal proxy and derived the IPv6
# proxy from it.
#
# If you manage to create an IPv6 proxy that's long-lived, you can comment out the second section below
    {
      Name     => 'CheckIpv6Proxy',
      Template => 'CheckProxy',
# FIX set the path to your IPv6 proxy
      Proxy    => '/tmp/wildish/proxy/voms.ipv6.cert',
    },
    {
      Name     => 'CheckVomsProxy',
      Template => 'CheckProxy',
# FIX set the path to your non-IPv6 proxy
      Proxy    => '/tmp/wildish/proxy/voms.cert',
    },
  ],
);

#
# FIX This is the main part of the code that defines the mesh. Create an entry for each site,
# the meanings of the fields should be obvious.
#
@Lifecycle::Sources = (
  {
    Name     => 'CCIN2P3',
    RemoteHost     => 'ccsrm02.in2p3.fr',
    RemotePath     => '/pnfs/in2p3.fr/data/dteam/ipv6/wildish',
  },
  {
    Name     => 'DESY',
    RemoteHost     => 'prometheus.desy.de',
    RemotePath     => '/VOs/ipv6/wildish',
  },
  {
    Name     => 'KIT',
    RemoteHost     => 'f11-101-102-e-v6.gridka.de:8443',
    RemotePath     => '/pnfs/gridka.de/hepix/ipv6/wildish',
  },
  {
    Name     => 'Imperial',
    RemoteHost     => 'gfe02.grid.hep.ph.ic.ac.uk:8443',
    RemotePath     => '/pnfs/hep.ph.ic.ac.uk/data/ipv6/wildish',
  },
  {
    Name     => 'CSCFI',
    RemoteHost     => 'kiniini.csc.fi:8443',
    RemotePath     => '/ipv6/wildish',
  },
  {
    Name     => 'NDGF',
    RemoteHost     => 'bunsen.ndgf.org:8443',
    RemotePath     => '/ipv6/wildish',
  },
  {
    Name     => 'PIC',
    RemoteHost     => 'srmv6.pic.es:8443',
    RemotePath     => '/pnfs/pic.es/data/ipv6.hepix.org/ipv6/wildish',
  },
);

# DON'T TOUCH
# This section takes the definition of the hosts, above, and builds workflow entries for the N * N mesh
# Most of this shouldn't be touched unless you need to do some specific magic.
{
  my $first = 0;
  foreach my $src ( @Lifecycle::Sources ) {
    foreach my $dst ( @Lifecycle::Sources ) {
#
# FIX the file to be transferred is specified here. It should be relative to the 'RemotePath' directory
# specified for each host, above.
      $src->{InputFile} = 'src/file-1000.dat';
#
# FIX Don't forget to specify the size too.
      $src->{InputFileSize} = 1048576000;
      my $s = $src->{Name};
      my $d = $dst->{Name};
      next if $src->{Name} eq $dst->{Name};
      print "Workflow: from $src->{Name} to $dst->{Name}\n";
      my $h;
      map { $h->{$_} = $dst->{$_} } keys %{$dst};
      $h->{Name} = $src->{Name} . ' to ' . $dst->{Name};
      $h->{InputHost}      = $src->{RemoteHost};
      $h->{RemoteProtocol}   = 'srm://' unless $h->{RemoteProtocol};
      $h->{InputFile}        = $h->{RemoteProtocol} . $src->{RemoteHost} . $src->{RemotePath} . '/' .$src->{InputFile};
      $h->{InputFileSize} = $src->{InputFileSize};
      $h->{Options} = '';
      if ( $src->{Options}{From} ) { $h->{Options} .= $src->{Options}{From} . ' '; }
      if ( $dst->{Options}{To}   ) { $h->{Options} .= $dst->{Options}{To}; }
      $h->{Options} =~ s% *$%%;
      delete $h->{Options} unless $h->{Options};
      $h->{CycleTime}  = 999_999_999; # 30 years!
      $h->{Template}   = 'IPv6MeshWorkflow';
      $h->{OutputFile} = 'file-' . $src->{Name} . '-%ID%.dat';
      $h->{Suspend} = 0;
      $h->{Intervals} = {
        'putFile'       => int(rand()*300)+1,
        'pollJob'       =>     10,
        'checkFile'     =>      3,
        'clearFile'     =>      3,
#
# FIX restartCycle determines how often a particular link is tested, in seconds. If you want to make
# tests more stressful, reduce this number. If you want to back off, increase it. Note that with N
# sites participating you can have up to 2 * (N-1) transfers per site at a time (N-1 inbound, N-1 outbound)
# and this can be a serious load as the testbed grows. This parameter lets you spread things out a bit
        'restartCycle'  => 300,
      },
      push @{$Lifecycle::Lite{Workflows}}, $h;
    }
  }
}

1;
