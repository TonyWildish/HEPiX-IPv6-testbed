#
# To configure the testbed, edit this file. Look for areas marked "FIX" and make the appropriate changes
# Areas labelled "DON'T FIX" can be ignored until/unless you want advanced features
#
%Lifecycle::Lite =
(
  Name    => 'Lifecycle Lite',

# DON"T FIX You can change the verbosity, but I don't recommend it.
  Quiet   => 0,
  Verbose => 1,
  Debug   => 0,

# FIX Change TmpDir to the name of a suitable directory
  TmpDir        => '/tmp/wildish/',

# DON"T FIX
  Dummy         => 0,
  Jitter        => 0.0, # Spread delay-times for workflow events by this factor
  CycleSpeedup  =>   1, # speed up time. 1 => real-time, 24 => one day per hour
  Suspend       =>   0, # set to 1 to suspend new workflows from starting,
                        # but allow existing workflows to run to completion
  StopOnIdle    =>   1, # spit the dummy if I have no work to do
  NJobs         =>  20, # degree of parallelism

# Also true globals, but these make sense to override. Providing values here
# is just a convenient way to avoid having to repeat them everywhere.
  CycleTime => 999_999_999, # 30 years!
  NCycles =>  -1, # < 0 => infinite, > 0 to limit

  KeepInputs  => 0, # keep the  input files of successful jobs?
  KeepOutputs => 0, # keep the output files of successful jobs?
  KeepLogs  => 0, # keep the    log files of successful jobs?
  KeepFailedInputs  => 1, # keep the  input files of failed jobs?
  KeepFailedOutputs => 1, # keep the output files of failed jobs?
  KeepFailedLogs  => 1, # keep the    log files of failed jobs?

  StatsFrequency => 3600 * 12,

  Templates =>
  {
    'IPv6MeshWorkflow' =>
    {
      CycleTime => 999_999_999, # 30 years!
      NCycles => -1,

      FTSService => 'https://fts3-kit-02-hepix.gridka.de:8443/fts3/',
#     FTSService => 'https://fts00.grid.hep.ph.ic.ac.uk:8443/fts3/',
      Proxy      => '/tmp/wildish/proxy/voms.ipv6.cert',

#     JobManager timeout
      Timeout => 14400,
      Events    => [ 'putFile', 'pollJob', 'checkFile', 'clearFile', 'restartCycle' ],
      Intervals => {
        'putFile' => undef,
        'pollJob' =>    10,
        'checkFile' =>     1,
        'clearFile' =>     1,
        'restartCycle'  =>   900,
      },
    },
    'CheckProxy' =>
    {
      CycleTime => 600,
      Incarnations => 1,
      NCycles   =>    1,
      Events => [ 'CheckProxy' ],
      GracePeriod => 600,
    },
  },

# Default values are applied if they are not defined per Template or Workflow
# This allows setting parameters for all Templates, rather than repeating them
  Defaults =>
  {
    Exec => {
      'CheckProxy'   => 'CheckProxy.pl',
      'putFile'      => 'ipv6PutFile.pl',
      'pollJob'      => 'ipv6PollJob.pl',
      'checkFile'    => 'ipv6CheckFile.pl',
      'clearFile'    => 'ipv6ClearFile.pl',
      'restartCycle' => 'ipv6RestartCycle.pl',
    },
  },

  Workflows =>
  [
    {
      Name     => 'CheckIpv6Proxy',
      Template => 'CheckProxy',
      Proxy    => '/tmp/wildish/proxy/voms.ipv6.cert',
    },
    {
      Name     => 'CheckVomsProxy',
      Template => 'CheckProxy',
      Proxy    => '/tmp/wildish/proxy/voms.cert',
    },
  ],
);

@Lifecycle::Sources = (
##  {
##    Name     => 'Brunel',
##    RemoteHost     => 'dc2-grid-e6-000.brunel.ac.uk',
##    RemotePath     => '/data1/dpmfs/ipv6.hepix.org/wildish',
##    UberFTPHost    => 'dc2-grid-23.brunel.ac.uk',
##  },
##  {
##    Name     => 'CERN',
##    RemoteHost     => 'v6hepix.cern.ch',
##    RemotePath     => '/home/ipv6user/wildish',
##  },
  {
    Name     => 'CCIN2P3',
    RemoteHost     => 'ccsrm02.in2p3.fr',
    RemotePath     => '/pnfs/in2p3.fr/data/dteam/ipv6/wildish',
  },
  {
    Name     => 'DESY',
    RemoteHost     => 'prometheus.desy.de',
    RemotePath     => '/VOs/ipv6/wildish',
  },
##  {
##    Name     => 'FNAL',
##    RemoteHost     => 'fgintosg1.fnal.gov',
##    RemotePath     => '/grid/home/ipv6wg/wildish',
##  },
  {
    Name     => 'KIT',
    RemoteHost     => 'f11-101-102-e-v6.gridka.de:8443',
    RemotePath     => '/pnfs/gridka.de/hepix/ipv6/wildish',
  },
  {
    Name     => 'Imperial',
    RemoteHost     => 'gfe02.grid.hep.ph.ic.ac.uk:8443',
    RemotePath     => '/pnfs/hep.ph.ic.ac.uk/data/ipv6/wildish',
  },
##  {
##    Name     => 'INFN',
##    RemoteHost     => 'seipersei.mi.infn.it',
##    RemotePath     => '/var/tmp/wildish',
##  },
  {
    Name     => 'CSCFI',
    RemoteHost     => 'kiniini.csc.fi:8443',
    RemotePath     => '/ipv6/wildish',
  },
  {
    Name     => 'NDGF',
    RemoteHost     => 'bunsen.ndgf.org:8443',
    RemotePath     => '/ipv6/wildish',
  },
  {
    Name     => 'PIC',
    RemoteHost     => 'srmv6.pic.es:8443',
    RemotePath     => '/pnfs/pic.es/data/ipv6.hepix.org/ipv6/wildish',
  },
##  {
##    Name     => 'Wisc',
##    RemoteHost     => 'g22n02.hep.wisc.edu',
##    RemotePath     => '/store/user/wildish',
##  },
);

{
  my $first = 0;
  foreach my $src ( @Lifecycle::Sources ) {
    foreach my $dst ( @Lifecycle::Sources ) {
      $src->{InputFile} = 'src/file-1000.gz' unless $src->{InputFile};
      $src->{InputFileSize} = 1048576000 unless $src->{InputFileSize};
      my $s = $src->{Name};
      my $d = $dst->{Name};

#      next unless ( $s eq 'FNAL' || $d eq 'FNAL' );
#      next unless ( $s eq 'NDGF' );

      next if $src->{Name} eq $dst->{Name};
      print "Workflow: from $src->{Name} to $dst->{Name}\n";
      my $h;
      map { $h->{$_} = $dst->{$_} } keys %{$dst};
      $h->{Name} = $src->{Name} . ' to ' . $dst->{Name};
      $h->{InputHost}      = $src->{RemoteHost};
      $h->{RemoteProtocol}   = 'srm://' unless $h->{RemoteProtocol};
      $h->{InputFile}        = $h->{RemoteProtocol} . $src->{RemoteHost} . $src->{RemotePath} . '/' .$src->{InputFile};
      $h->{InputFileSize} = $src->{InputFileSize};
      $h->{Options} = '';
      if ( $src->{Options}{From} ) { $h->{Options} .= $src->{Options}{From} . ' '; }
      if ( $dst->{Options}{To}   ) { $h->{Options} .= $dst->{Options}{To}; }
      $h->{Options} =~ s% *$%%;
      delete $h->{Options} unless $h->{Options};
      $h->{CycleTime}  = 999_999_999; # 30 years!
      $h->{Template}   = 'IPv6MeshWorkflow';
      $h->{OutputFile} = 'file-' . $src->{Name} . '-%ID%.gz';
      $h->{Suspend} = 0;
      $h->{Intervals} = {
  'putFile'   => int(rand()*300)+1,
        'pollJob'   =>     10,
        'checkFile' =>      3,
        'clearFile' =>      3,
        'restartCycle' => 300,
      },
      push @{$Lifecycle::Lite{Workflows}}, $h;
    }
  }
}

1;
