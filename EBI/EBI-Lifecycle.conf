defined($ENV{TESTBED_ROOT}) or die "It looks like you forgot to source the environment script. Do that, and try again\n";

%Lifecycle::Lite =
(
  Name    => 'Lifecycle Lite', # don't worry about this

# These are true globals. Overriding these per Workflow does not make sense
  Quiet   => 0,
  Verbose => 1,
  Debug   => 1,
  Dummy   => 0,   # Just run the framework. Used only for specialised
                  # debugging (of the LifeCycle agent itself)
  Jitter  => 0.0, # Spread delay-times for workflow events by this factor
  CycleSpeedup  =>   1, # speed up time. 1 => real-time, 24 => one day per hour
  Suspend       =>   0, # set to 1 to suspend new workflows from starting,
                        # but allow existing workflows to run to completion
  StopOnIdle  =>   1, # spit the dummy if I have no work to do
  NJobs       =>   4, # degree of parallelism

# Also true globals, but these make sense to override. Providing values here
# is just a convenient way to avoid having to repeat them everywhere.
  CycleTime => 999_999_999, # 30 years!
  NCycles =>  -1, # < 0 => infinite, > 0 to limit

  KeepInputs  => 0, # keep the  input files of successful jobs?
  KeepOutputs => 0, # keep the output files of successful jobs?
  KeepLogs    => 0, # keep the    log files of successful jobs?
  KeepFailedInputs  => 1, # keep the  input files of failed jobs?
  KeepFailedOutputs => 1, # keep the output files of failed jobs?
  KeepFailedLogs    => 1, # keep the    log files of failed jobs?

  StatsFrequency => 3600 * 12,

  Templates =>
  {
    'EBI-MeshWorkflow' =>
    {
      CycleTime => 999_999_999, # 30 years!
      NCycles => -1,
      UseIPv4 => 1,
#     JobManager timeout
      Timeout => 14400,
      Results => $ENV{TESTBED_ROOT} . '/EBI',

#     InputFile => $ENV{TESTBED_ROOT} . '/data/file-1000.dat',
      Events    => [ 'getInputFileSize', 'putFile', 'checkFile', 'clearFile', 'restartCycle' ],
#      EventLoop => [
#       'putFile',
#       'loopEvents',
#      ],
      Intervals => {
        'putFile'      => undef,
        'checkFile'    =>     5,
        'clearFile'    =>     5,
        'restartCycle' =>    60,
        'loopEvents'   =>    60,
      },

      OutputFile => 'file-%ID%.dat',
    },
    'CheckProxy' => {
      CycleTime    => 600,
      Incarnations => 1,
      NCycles      => 1,
      Events       => [ 'CheckProxy' ],
      GracePeriod  => 600,
      Proxy        => "/tmp/x509up_u" . $<,
    },
  },

# Default values are applied if they are not defined per Template or Workflow
# This allows setting parameters for all Templates, rather than repeating them
  Defaults =>
  {
    Exec => {
      'CheckProxy'       => 'CheckProxy.pl',
      'putFile'          => 'PutFile.pl',
      'getInputFileSize' => 'GetInputFileSize.pl',
      'restartCycle'     => 'RestartCycle.pl',
      'checkFile'        => 'CheckFile.pl',
      'clearFile'        => 'ClearFile.pl',
      loopEvents         => 'loopEvents.pl',
    },
  },

  Workflows =>
  [
    { Name     => 'CheckProxy', },
  ],
);

@Lifecycle::Sources = (
  {
    Name => 'EBI',
    RemoteHost => 'tony-gridftp',
    RemotePath => '', # '/home/centos/HEPiX-IPv6-testbed',
    Options => { # I seem to need these because there's something screwy about the certificate on tony-gridftp
#      To   => "-ds '/O=Grid/OU=GlobusTest/OU=simpleCA-tony-myproxy.novalocal/OU=Globus Simple CA/CN=tony-gridftp.novalocal'",
#      From => "-ss '/O=Grid/OU=GlobusTest/OU=simpleCA-tony-myproxy.novalocal/OU=Globus Simple CA/CN=tony-gridftp.novalocal'",
    },
  },
  {
    Name => 'BILS',
    RemoteHost => 'gridftp.bils.se',
    RemotePath => '/home/tony/gridFTP',
#    UberFTPHost => 'bils3.scilifelab.se',
  },
);

{
  my $first = 0;
  foreach my $src ( @Lifecycle::Sources ) {
    $src->{InputFile} = 'data/file-10000.dat' unless $src->{InputFile};

    foreach my $dst ( @Lifecycle::Sources ) {
      my $s = $src->{Name};
      my $d = $dst->{Name};
      next unless ( $s eq 'EBI' );
      next if $src->{Name} eq $dst->{Name};
      my $h;
      map { $h->{$_} = $dst->{$_} } keys %{$dst};
      $h->{Name} = $src->{Name} . ' to ' . $dst->{Name};
      $h->{InputUberFTPHost} = $src->{UberFTPHost} if $src->{UberFTPHost};
      $h->{InputHost}      = $src->{RemoteHost};
      $h->{InputFileSize}    = $src->{InputFileSize} if $src->{InputFileSize};
      $h->{RemoteProtocol}   = 'gsiftp://' unless $h->{RemoteProtocol};
      $h->{InputFile}        = $h->{RemoteProtocol} . $src->{RemoteHost} . $src->{RemotePath} . '/' .$src->{InputFile};
      $h->{Options} = '';
      if ( $src->{Options}{From} ) { $h->{Options} .= $src->{Options}{From} . ' '; }
      if ( $dst->{Options}{To}   ) { $h->{Options} .= $dst->{Options}{To}; }
      $h->{Options} =~ s% *$%%;
      delete $h->{Options} unless $h->{Options};
      $h->{CycleTime}  = 999_999_999; # 30 years!
      $h->{Template}   = 'EBI-MeshWorkflow';
      $h->{OutputFile} = 'file-' . $src->{Name} . '-%ID%.dat';
#     $h->{Suspend} = 1;
      push @{$Lifecycle::Lite{Workflows}}, $h;
    }
  }
}

1;
